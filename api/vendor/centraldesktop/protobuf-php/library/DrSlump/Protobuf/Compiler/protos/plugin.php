<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@ 
// Source: plugin.proto 
//   Date: 2012-03-12 18:10:14 


namespace google\protobuf\compiler {

         
    class CodeGeneratorRequest extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;   

        /** @var \Closure[] */
        protected static $__extensions = array();


        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.compiler.CodeGeneratorRequest');

             
            // repeated string = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "file_to_generate";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "parameter";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message = 15 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 15;
            $f->name   = "proto_file";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FileDescriptorProto';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "file_to_generate" has a value
         *
         * @return boolean
         */
        public function hasFileToGenerate()
        {
            return isset($this->file_to_generate);
        }

        /**
         * Clear "file_to_generate" value
         */
        public function clearFileToGenerate()
        {
            unset($this->file_to_generate);
        }

        
        /**
         * Get "file_to_generate" value
         *
         * @return string[]
         */
        public function getFileToGenerate()
        {
            return $this->file_to_generate;
        }

        /**
         * Set "file_to_generate" value
         *
         * @param string[] $value
         */
        public function setFileToGenerate($value)
        {
            return $this->file_to_generate = $value;
        }

        /**
         * Add a new element to "file_to_generate"
         *
         * @param string $value
         */
        public function addFileToGenerate($value)
        {
            $this->file_to_generate[] = $value;
        }

        
                
        /**
         * Check if "parameter" has a value
         *
         * @return boolean
         */
        public function hasParameter()
        {
            return isset($this->parameter);
        }

        /**
         * Clear "parameter" value
         */
        public function clearParameter()
        {
            unset($this->parameter);
        }

        
        /**
         * Get "parameter" value
         *
         * @return string 
         */
        public function getParameter()
        {
            return $this->parameter;
        }

        /**
         * Set "parameter" value
         *
         * @param string $value
         */
        public function setParameter($value)
        {
            return $this->parameter = $value;
        }

        
                
        /**
         * Check if "proto_file" has a value
         *
         * @return boolean
         */
        public function hasProtoFile()
        {
            return isset($this->proto_file);
        }

        /**
         * Clear "proto_file" value
         */
        public function clearProtoFile()
        {
            unset($this->proto_file);
        }

        
        /**
         * Get "proto_file" value
         *
         * @return google\protobuf\FileDescriptorProto[]
         */
        public function getProtoFile()
        {
            return $this->proto_file;
        }

        /**
         * Set "proto_file" value
         *
         * @param google\protobuf\FileDescriptorProto[] $value
         */
        public function setProtoFile($value)
        {
            return $this->proto_file = $value;
        }

        /**
         * Add a new element to "proto_file"
         *
         * @param google\protobuf\FileDescriptorProto $value
         */
        public function addProtoFile($value)
        {
            $this->proto_file[] = $value;
        }
    }
}


namespace google\protobuf\compiler {

         
    class CodeGeneratorResponse extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;   

        /** @var \Closure[] */
        protected static $__extensions = array();


        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.compiler.CodeGeneratorResponse');

             
            // optional string = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "error";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message = 15 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 15;
            $f->name   = "file";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\compiler\CodeGeneratorResponse\File';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "error" has a value
         *
         * @return boolean
         */
        public function hasError()
        {
            return isset($this->error);
        }

        /**
         * Clear "error" value
         */
        public function clearError()
        {
            unset($this->error);
        }

        
        /**
         * Get "error" value
         *
         * @return string 
         */
        public function getError()
        {
            return $this->error;
        }

        /**
         * Set "error" value
         *
         * @param string $value
         */
        public function setError($value)
        {
            return $this->error = $value;
        }

        
                
        /**
         * Check if "file" has a value
         *
         * @return boolean
         */
        public function hasFile()
        {
            return isset($this->file);
        }

        /**
         * Clear "file" value
         */
        public function clearFile()
        {
            unset($this->file);
        }

        
        /**
         * Get "file" value
         *
         * @return google\protobuf\compiler\CodeGeneratorResponse\File[]
         */
        public function getFile()
        {
            return $this->file;
        }

        /**
         * Set "file" value
         *
         * @param google\protobuf\compiler\CodeGeneratorResponse\File[] $value
         */
        public function setFile($value)
        {
            return $this->file = $value;
        }

        /**
         * Add a new element to "file"
         *
         * @param google\protobuf\compiler\CodeGeneratorResponse\File $value
         */
        public function addFile($value)
        {
            $this->file[] = $value;
        }
    }
}


namespace google\protobuf\compiler\CodeGeneratorResponse {

         
    class File extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;   

        /** @var \Closure[] */
        protected static $__extensions = array();


        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.compiler.CodeGeneratorResponse.File');

             
            // optional string = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "insertion_point";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string = 15 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 15;
            $f->name   = "content";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "insertion_point" has a value
         *
         * @return boolean
         */
        public function hasInsertionPoint()
        {
            return isset($this->insertion_point);
        }

        /**
         * Clear "insertion_point" value
         */
        public function clearInsertionPoint()
        {
            unset($this->insertion_point);
        }

        
        /**
         * Get "insertion_point" value
         *
         * @return string 
         */
        public function getInsertionPoint()
        {
            return $this->insertion_point;
        }

        /**
         * Set "insertion_point" value
         *
         * @param string $value
         */
        public function setInsertionPoint($value)
        {
            return $this->insertion_point = $value;
        }

        
                
        /**
         * Check if "content" has a value
         *
         * @return boolean
         */
        public function hasContent()
        {
            return isset($this->content);
        }

        /**
         * Clear "content" value
         */
        public function clearContent()
        {
            unset($this->content);
        }

        
        /**
         * Get "content" value
         *
         * @return string 
         */
        public function getContent()
        {
            return $this->content;
        }

        /**
         * Set "content" value
         *
         * @param string $value
         */
        public function setContent($value)
        {
            return $this->content = $value;
        }
    }
}


