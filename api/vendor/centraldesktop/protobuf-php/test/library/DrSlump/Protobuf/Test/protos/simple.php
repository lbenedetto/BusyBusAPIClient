<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: simple.proto 
//   Date: 2013-12-16 18:52:07 


namespace DrSlump\Protobuf\Test\protos {

         
    class Simple extends \DrSlump\Protobuf\Message {
                                                                                                                                                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'DrSlump.Protobuf.Test.protos.Simple');

             
            // optional double double = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "double";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
             
            // optional float float = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "float";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FLOAT;

            $descriptor->addField($f);
             
            // optional int64 int64 = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "int64";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
             
            // optional uint64 uint64 = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "uint64";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional int32 int32 = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "int32";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional fixed64 fixed64 = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "fixed64";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FIXED64;

            $descriptor->addField($f);
             
            // optional fixed32 fixed32 = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "fixed32";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FIXED32;

            $descriptor->addField($f);
             
            // optional bool bool = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "bool";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);
             
            // optional string string = 9 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "string";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional bytes bytes = 12 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 12;
            $f->name   = "bytes";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
             
            // optional uint32 uint32 = 13 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 13;
            $f->name   = "uint32";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);
             
            // optional sfixed32 sfixed32 = 15 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 15;
            $f->name   = "sfixed32";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_SFIXED32;

            $descriptor->addField($f);
             
            // optional sfixed64 sfixed64 = 16 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 16;
            $f->name   = "sfixed64";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_SFIXED64;

            $descriptor->addField($f);
             
            // optional sint32 sint32 = 17 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 17;
            $f->name   = "sint32";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_SINT32;

            $descriptor->addField($f);
             
            // optional sint64 sint64 = 18 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 18;
            $f->name   = "sint64";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_SINT64;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "double" has a value
         *
         * @return boolean
         */
        public function hasDouble()
        {
            return isset($this->double);
        }

        /**
         * Clear "double" value
         */
        public function clearDouble()
        {
            unset($this->double);
        }

        
        /**
         * Get "double" value
         *
         * @return float 
         */
        public function getDouble()
        {
            return $this->double;
        }

        /**
         * Set "double" value
         *
         * @param float $value
         */
        public function setDouble($value)
        {
            return $this->double = $value;
        }

        
                
        /**
         * Check if "float" has a value
         *
         * @return boolean
         */
        public function hasFloat()
        {
            return isset($this->float);
        }

        /**
         * Clear "float" value
         */
        public function clearFloat()
        {
            unset($this->float);
        }

        
        /**
         * Get "float" value
         *
         * @return float 
         */
        public function getFloat()
        {
            return $this->float;
        }

        /**
         * Set "float" value
         *
         * @param float $value
         */
        public function setFloat($value)
        {
            return $this->float = $value;
        }

        
                
        /**
         * Check if "int64" has a value
         *
         * @return boolean
         */
        public function hasInt64()
        {
            return isset($this->int64);
        }

        /**
         * Clear "int64" value
         */
        public function clearInt64()
        {
            unset($this->int64);
        }

        
        /**
         * Get "int64" value
         *
         * @return int 
         */
        public function getInt64()
        {
            return $this->int64;
        }

        /**
         * Set "int64" value
         *
         * @param int $value
         */
        public function setInt64($value)
        {
            return $this->int64 = $value;
        }

        
                
        /**
         * Check if "uint64" has a value
         *
         * @return boolean
         */
        public function hasUint64()
        {
            return isset($this->uint64);
        }

        /**
         * Clear "uint64" value
         */
        public function clearUint64()
        {
            unset($this->uint64);
        }

        
        /**
         * Get "uint64" value
         *
         * @return int 
         */
        public function getUint64()
        {
            return $this->uint64;
        }

        /**
         * Set "uint64" value
         *
         * @param int $value
         */
        public function setUint64($value)
        {
            return $this->uint64 = $value;
        }

        
                
        /**
         * Check if "int32" has a value
         *
         * @return boolean
         */
        public function hasInt32()
        {
            return isset($this->int32);
        }

        /**
         * Clear "int32" value
         */
        public function clearInt32()
        {
            unset($this->int32);
        }

        
        /**
         * Get "int32" value
         *
         * @return int 
         */
        public function getInt32()
        {
            return $this->int32;
        }

        /**
         * Set "int32" value
         *
         * @param int $value
         */
        public function setInt32($value)
        {
            return $this->int32 = $value;
        }

        
                
        /**
         * Check if "fixed64" has a value
         *
         * @return boolean
         */
        public function hasFixed64()
        {
            return isset($this->fixed64);
        }

        /**
         * Clear "fixed64" value
         */
        public function clearFixed64()
        {
            unset($this->fixed64);
        }

        
        /**
         * Get "fixed64" value
         *
         * @return int 
         */
        public function getFixed64()
        {
            return $this->fixed64;
        }

        /**
         * Set "fixed64" value
         *
         * @param int $value
         */
        public function setFixed64($value)
        {
            return $this->fixed64 = $value;
        }

        
                
        /**
         * Check if "fixed32" has a value
         *
         * @return boolean
         */
        public function hasFixed32()
        {
            return isset($this->fixed32);
        }

        /**
         * Clear "fixed32" value
         */
        public function clearFixed32()
        {
            unset($this->fixed32);
        }

        
        /**
         * Get "fixed32" value
         *
         * @return int 
         */
        public function getFixed32()
        {
            return $this->fixed32;
        }

        /**
         * Set "fixed32" value
         *
         * @param int $value
         */
        public function setFixed32($value)
        {
            return $this->fixed32 = $value;
        }

        
                
        /**
         * Check if "bool" has a value
         *
         * @return boolean
         */
        public function hasBool()
        {
            return isset($this->bool);
        }

        /**
         * Clear "bool" value
         */
        public function clearBool()
        {
            unset($this->bool);
        }

        
        /**
         * Get "bool" value
         *
         * @return boolean 
         */
        public function getBool()
        {
            return $this->bool;
        }

        /**
         * Set "bool" value
         *
         * @param boolean $value
         */
        public function setBool($value)
        {
            return $this->bool = $value;
        }

        
                
        /**
         * Check if "string" has a value
         *
         * @return boolean
         */
        public function hasString()
        {
            return isset($this->string);
        }

        /**
         * Clear "string" value
         */
        public function clearString()
        {
            unset($this->string);
        }

        
        /**
         * Get "string" value
         *
         * @return string 
         */
        public function getString()
        {
            return $this->string;
        }

        /**
         * Set "string" value
         *
         * @param string $value
         */
        public function setString($value)
        {
            return $this->string = $value;
        }

        
                
        /**
         * Check if "bytes" has a value
         *
         * @return boolean
         */
        public function hasBytes()
        {
            return isset($this->bytes);
        }

        /**
         * Clear "bytes" value
         */
        public function clearBytes()
        {
            unset($this->bytes);
        }

        
        /**
         * Get "bytes" value
         *
         * @return string 
         */
        public function getBytes()
        {
            return $this->bytes;
        }

        /**
         * Set "bytes" value
         *
         * @param string $value
         */
        public function setBytes($value)
        {
            return $this->bytes = $value;
        }

        
                
        /**
         * Check if "uint32" has a value
         *
         * @return boolean
         */
        public function hasUint32()
        {
            return isset($this->uint32);
        }

        /**
         * Clear "uint32" value
         */
        public function clearUint32()
        {
            unset($this->uint32);
        }

        
        /**
         * Get "uint32" value
         *
         * @return int 
         */
        public function getUint32()
        {
            return $this->uint32;
        }

        /**
         * Set "uint32" value
         *
         * @param int $value
         */
        public function setUint32($value)
        {
            return $this->uint32 = $value;
        }

        
                
        /**
         * Check if "sfixed32" has a value
         *
         * @return boolean
         */
        public function hasSfixed32()
        {
            return isset($this->sfixed32);
        }

        /**
         * Clear "sfixed32" value
         */
        public function clearSfixed32()
        {
            unset($this->sfixed32);
        }

        
        /**
         * Get "sfixed32" value
         *
         * @return int 
         */
        public function getSfixed32()
        {
            return $this->sfixed32;
        }

        /**
         * Set "sfixed32" value
         *
         * @param int $value
         */
        public function setSfixed32($value)
        {
            return $this->sfixed32 = $value;
        }

        
                
        /**
         * Check if "sfixed64" has a value
         *
         * @return boolean
         */
        public function hasSfixed64()
        {
            return isset($this->sfixed64);
        }

        /**
         * Clear "sfixed64" value
         */
        public function clearSfixed64()
        {
            unset($this->sfixed64);
        }

        
        /**
         * Get "sfixed64" value
         *
         * @return int 
         */
        public function getSfixed64()
        {
            return $this->sfixed64;
        }

        /**
         * Set "sfixed64" value
         *
         * @param int $value
         */
        public function setSfixed64($value)
        {
            return $this->sfixed64 = $value;
        }

        
                
        /**
         * Check if "sint32" has a value
         *
         * @return boolean
         */
        public function hasSint32()
        {
            return isset($this->sint32);
        }

        /**
         * Clear "sint32" value
         */
        public function clearSint32()
        {
            unset($this->sint32);
        }

        
        /**
         * Get "sint32" value
         *
         * @return int 
         */
        public function getSint32()
        {
            return $this->sint32;
        }

        /**
         * Set "sint32" value
         *
         * @param int $value
         */
        public function setSint32($value)
        {
            return $this->sint32 = $value;
        }

        
                
        /**
         * Check if "sint64" has a value
         *
         * @return boolean
         */
        public function hasSint64()
        {
            return isset($this->sint64);
        }

        /**
         * Clear "sint64" value
         */
        public function clearSint64()
        {
            unset($this->sint64);
        }

        
        /**
         * Get "sint64" value
         *
         * @return int 
         */
        public function getSint64()
        {
            return $this->sint64;
        }

        /**
         * Set "sint64" value
         *
         * @param int $value
         */
        public function setSint64($value)
        {
            return $this->sint64 = $value;
        }
    }
}


