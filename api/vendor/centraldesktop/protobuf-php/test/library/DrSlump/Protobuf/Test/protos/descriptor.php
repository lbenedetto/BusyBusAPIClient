<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: descriptor.proto 
//   Date: 2013-12-17 08:03:52 


namespace google\protobuf {

         
    class FileDescriptorSet extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FileDescriptorSet');

             
            // repeated message file = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "file";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FileDescriptorProto';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "file" has a value
         *
         * @return boolean
         */
        public function hasFile()
        {
            return isset($this->file);
        }

        /**
         * Clear "file" value
         */
        public function clearFile()
        {
            unset($this->file);
        }

        
        /**
         * Get "file" value
         *
         * @return google\protobuf\FileDescriptorProto[]
         */
        public function getFile($idx = null)
        {
            if (NULL !== $idx) {
                return $this->file[$idx];
            }

            return $this->file;
        }

        /**
         * Get "file" list of values
         *
         * @return google\protobuf\FileDescriptorProto[]
         */
        public function getFileList()
        {
            return $this->getFile();
        }

        /**
         * Set "file" value
         *
         * @param google\protobuf\FileDescriptorProto[] $value
         */
        public function setFile($value)
        {
            return $this->file = $value;
        }

        /**
         * Add a new element to "file"
         *
         * @param google\protobuf\FileDescriptorProto $value
         */
        public function addFile($value)
        {
            $this->file[] = $value;
        }
    }
}


namespace google\protobuf {

         
    class FileDescriptorProto extends \DrSlump\Protobuf\Message {
                                                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FileDescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string package = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "package";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated string dependency = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "dependency";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message message_type = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "message_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\DescriptorProto';

            $descriptor->addField($f);
             
            // repeated message enum_type = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "enum_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\EnumDescriptorProto';

            $descriptor->addField($f);
             
            // repeated message service = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "service";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\ServiceDescriptorProto';

            $descriptor->addField($f);
             
            // repeated message extension = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "extension_";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FieldDescriptorProto';

            $descriptor->addField($f);
             
            // optional message options = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FileOptions';

            $descriptor->addField($f);
             
            // optional message source_code_info = 9 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "source_code_info";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\SourceCodeInfo';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "package" has a value
         *
         * @return boolean
         */
        public function hasPackage()
        {
            return isset($this->package);
        }

        /**
         * Clear "package" value
         */
        public function clearPackage()
        {
            unset($this->package);
        }

        
        /**
         * Get "package" value
         *
         * @return string 
         */
        public function getPackage()
        {
            return $this->package;
        }

        /**
         * Set "package" value
         *
         * @param string $value
         */
        public function setPackage($value)
        {
            return $this->package = $value;
        }

        
                
        /**
         * Check if "dependency" has a value
         *
         * @return boolean
         */
        public function hasDependency()
        {
            return isset($this->dependency);
        }

        /**
         * Clear "dependency" value
         */
        public function clearDependency()
        {
            unset($this->dependency);
        }

        
        /**
         * Get "dependency" value
         *
         * @return string[]
         */
        public function getDependency($idx = null)
        {
            if (NULL !== $idx) {
                return $this->dependency[$idx];
            }

            return $this->dependency;
        }

        /**
         * Get "dependency" list of values
         *
         * @return string[]
         */
        public function getDependencyList()
        {
            return $this->getDependency();
        }

        /**
         * Set "dependency" value
         *
         * @param string[] $value
         */
        public function setDependency($value)
        {
            return $this->dependency = $value;
        }

        /**
         * Add a new element to "dependency"
         *
         * @param string $value
         */
        public function addDependency($value)
        {
            $this->dependency[] = $value;
        }

        
                
        /**
         * Check if "message_type" has a value
         *
         * @return boolean
         */
        public function hasMessageType()
        {
            return isset($this->message_type);
        }

        /**
         * Clear "message_type" value
         */
        public function clearMessageType()
        {
            unset($this->message_type);
        }

        
        /**
         * Get "message_type" value
         *
         * @return google\protobuf\DescriptorProto[]
         */
        public function getMessageType($idx = null)
        {
            if (NULL !== $idx) {
                return $this->message_type[$idx];
            }

            return $this->message_type;
        }

        /**
         * Get "message_type" list of values
         *
         * @return google\protobuf\DescriptorProto[]
         */
        public function getMessageTypeList()
        {
            return $this->getMessageType();
        }

        /**
         * Set "message_type" value
         *
         * @param google\protobuf\DescriptorProto[] $value
         */
        public function setMessageType($value)
        {
            return $this->message_type = $value;
        }

        /**
         * Add a new element to "message_type"
         *
         * @param google\protobuf\DescriptorProto $value
         */
        public function addMessageType($value)
        {
            $this->message_type[] = $value;
        }

        
                
        /**
         * Check if "enum_type" has a value
         *
         * @return boolean
         */
        public function hasEnumType()
        {
            return isset($this->enum_type);
        }

        /**
         * Clear "enum_type" value
         */
        public function clearEnumType()
        {
            unset($this->enum_type);
        }

        
        /**
         * Get "enum_type" value
         *
         * @return google\protobuf\EnumDescriptorProto[]
         */
        public function getEnumType($idx = null)
        {
            if (NULL !== $idx) {
                return $this->enum_type[$idx];
            }

            return $this->enum_type;
        }

        /**
         * Get "enum_type" list of values
         *
         * @return google\protobuf\EnumDescriptorProto[]
         */
        public function getEnumTypeList()
        {
            return $this->getEnumType();
        }

        /**
         * Set "enum_type" value
         *
         * @param google\protobuf\EnumDescriptorProto[] $value
         */
        public function setEnumType($value)
        {
            return $this->enum_type = $value;
        }

        /**
         * Add a new element to "enum_type"
         *
         * @param google\protobuf\EnumDescriptorProto $value
         */
        public function addEnumType($value)
        {
            $this->enum_type[] = $value;
        }

        
                
        /**
         * Check if "service" has a value
         *
         * @return boolean
         */
        public function hasService()
        {
            return isset($this->service);
        }

        /**
         * Clear "service" value
         */
        public function clearService()
        {
            unset($this->service);
        }

        
        /**
         * Get "service" value
         *
         * @return google\protobuf\ServiceDescriptorProto[]
         */
        public function getService($idx = null)
        {
            if (NULL !== $idx) {
                return $this->service[$idx];
            }

            return $this->service;
        }

        /**
         * Get "service" list of values
         *
         * @return google\protobuf\ServiceDescriptorProto[]
         */
        public function getServiceList()
        {
            return $this->getService();
        }

        /**
         * Set "service" value
         *
         * @param google\protobuf\ServiceDescriptorProto[] $value
         */
        public function setService($value)
        {
            return $this->service = $value;
        }

        /**
         * Add a new element to "service"
         *
         * @param google\protobuf\ServiceDescriptorProto $value
         */
        public function addService($value)
        {
            $this->service[] = $value;
        }

        
                
        /**
         * Check if "extension_" has a value
         *
         * @return boolean
         */
        public function hasExtension_()
        {
            return isset($this->extension_);
        }

        /**
         * Clear "extension_" value
         */
        public function clearExtension_()
        {
            unset($this->extension_);
        }

        
        /**
         * Get "extension_" value
         *
         * @return google\protobuf\FieldDescriptorProto[]
         */
        public function getExtension_($idx = null)
        {
            if (NULL !== $idx) {
                return $this->extension_[$idx];
            }

            return $this->extension_;
        }

        /**
         * Get "extension_" list of values
         *
         * @return google\protobuf\FieldDescriptorProto[]
         */
        public function getExtension_List()
        {
            return $this->getExtension_();
        }

        /**
         * Set "extension_" value
         *
         * @param google\protobuf\FieldDescriptorProto[] $value
         */
        public function setExtension_($value)
        {
            return $this->extension_ = $value;
        }

        /**
         * Add a new element to "extension_"
         *
         * @param google\protobuf\FieldDescriptorProto $value
         */
        public function addExtension_($value)
        {
            $this->extension_[] = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\FileOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\FileOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }

        
                
        /**
         * Check if "source_code_info" has a value
         *
         * @return boolean
         */
        public function hasSourceCodeInfo()
        {
            return isset($this->source_code_info);
        }

        /**
         * Clear "source_code_info" value
         */
        public function clearSourceCodeInfo()
        {
            unset($this->source_code_info);
        }

        
        /**
         * Get "source_code_info" value
         *
         * @return google\protobuf\SourceCodeInfo 
         */
        public function getSourceCodeInfo()
        {
            return $this->source_code_info;
        }

        /**
         * Set "source_code_info" value
         *
         * @param google\protobuf\SourceCodeInfo $value
         */
        public function setSourceCodeInfo($value)
        {
            return $this->source_code_info = $value;
        }
    }
}


namespace google\protobuf {

         
    class DescriptorProto extends \DrSlump\Protobuf\Message {
                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.DescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message field = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "field";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FieldDescriptorProto';

            $descriptor->addField($f);
             
            // repeated message extension = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "extension_";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FieldDescriptorProto';

            $descriptor->addField($f);
             
            // repeated message nested_type = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "nested_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\DescriptorProto';

            $descriptor->addField($f);
             
            // repeated message enum_type = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "enum_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\EnumDescriptorProto';

            $descriptor->addField($f);
             
            // repeated message extension_range = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "extension_range";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\DescriptorProto\ExtensionRange';

            $descriptor->addField($f);
             
            // optional message options = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\MessageOptions';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "field" has a value
         *
         * @return boolean
         */
        public function hasField()
        {
            return isset($this->field);
        }

        /**
         * Clear "field" value
         */
        public function clearField()
        {
            unset($this->field);
        }

        
        /**
         * Get "field" value
         *
         * @return google\protobuf\FieldDescriptorProto[]
         */
        public function getField($idx = null)
        {
            if (NULL !== $idx) {
                return $this->field[$idx];
            }

            return $this->field;
        }

        /**
         * Get "field" list of values
         *
         * @return google\protobuf\FieldDescriptorProto[]
         */
        public function getFieldList()
        {
            return $this->getField();
        }

        /**
         * Set "field" value
         *
         * @param google\protobuf\FieldDescriptorProto[] $value
         */
        public function setField($value)
        {
            return $this->field = $value;
        }

        /**
         * Add a new element to "field"
         *
         * @param google\protobuf\FieldDescriptorProto $value
         */
        public function addField($value)
        {
            $this->field[] = $value;
        }

        
                
        /**
         * Check if "extension_" has a value
         *
         * @return boolean
         */
        public function hasExtension_()
        {
            return isset($this->extension_);
        }

        /**
         * Clear "extension_" value
         */
        public function clearExtension_()
        {
            unset($this->extension_);
        }

        
        /**
         * Get "extension_" value
         *
         * @return google\protobuf\FieldDescriptorProto[]
         */
        public function getExtension_($idx = null)
        {
            if (NULL !== $idx) {
                return $this->extension_[$idx];
            }

            return $this->extension_;
        }

        /**
         * Get "extension_" list of values
         *
         * @return google\protobuf\FieldDescriptorProto[]
         */
        public function getExtension_List()
        {
            return $this->getExtension_();
        }

        /**
         * Set "extension_" value
         *
         * @param google\protobuf\FieldDescriptorProto[] $value
         */
        public function setExtension_($value)
        {
            return $this->extension_ = $value;
        }

        /**
         * Add a new element to "extension_"
         *
         * @param google\protobuf\FieldDescriptorProto $value
         */
        public function addExtension_($value)
        {
            $this->extension_[] = $value;
        }

        
                
        /**
         * Check if "nested_type" has a value
         *
         * @return boolean
         */
        public function hasNestedType()
        {
            return isset($this->nested_type);
        }

        /**
         * Clear "nested_type" value
         */
        public function clearNestedType()
        {
            unset($this->nested_type);
        }

        
        /**
         * Get "nested_type" value
         *
         * @return google\protobuf\DescriptorProto[]
         */
        public function getNestedType($idx = null)
        {
            if (NULL !== $idx) {
                return $this->nested_type[$idx];
            }

            return $this->nested_type;
        }

        /**
         * Get "nested_type" list of values
         *
         * @return google\protobuf\DescriptorProto[]
         */
        public function getNestedTypeList()
        {
            return $this->getNestedType();
        }

        /**
         * Set "nested_type" value
         *
         * @param google\protobuf\DescriptorProto[] $value
         */
        public function setNestedType($value)
        {
            return $this->nested_type = $value;
        }

        /**
         * Add a new element to "nested_type"
         *
         * @param google\protobuf\DescriptorProto $value
         */
        public function addNestedType($value)
        {
            $this->nested_type[] = $value;
        }

        
                
        /**
         * Check if "enum_type" has a value
         *
         * @return boolean
         */
        public function hasEnumType()
        {
            return isset($this->enum_type);
        }

        /**
         * Clear "enum_type" value
         */
        public function clearEnumType()
        {
            unset($this->enum_type);
        }

        
        /**
         * Get "enum_type" value
         *
         * @return google\protobuf\EnumDescriptorProto[]
         */
        public function getEnumType($idx = null)
        {
            if (NULL !== $idx) {
                return $this->enum_type[$idx];
            }

            return $this->enum_type;
        }

        /**
         * Get "enum_type" list of values
         *
         * @return google\protobuf\EnumDescriptorProto[]
         */
        public function getEnumTypeList()
        {
            return $this->getEnumType();
        }

        /**
         * Set "enum_type" value
         *
         * @param google\protobuf\EnumDescriptorProto[] $value
         */
        public function setEnumType($value)
        {
            return $this->enum_type = $value;
        }

        /**
         * Add a new element to "enum_type"
         *
         * @param google\protobuf\EnumDescriptorProto $value
         */
        public function addEnumType($value)
        {
            $this->enum_type[] = $value;
        }

        
                
        /**
         * Check if "extension_range" has a value
         *
         * @return boolean
         */
        public function hasExtensionRange()
        {
            return isset($this->extension_range);
        }

        /**
         * Clear "extension_range" value
         */
        public function clearExtensionRange()
        {
            unset($this->extension_range);
        }

        
        /**
         * Get "extension_range" value
         *
         * @return google\protobuf\DescriptorProto\ExtensionRange[]
         */
        public function getExtensionRange($idx = null)
        {
            if (NULL !== $idx) {
                return $this->extension_range[$idx];
            }

            return $this->extension_range;
        }

        /**
         * Get "extension_range" list of values
         *
         * @return google\protobuf\DescriptorProto\ExtensionRange[]
         */
        public function getExtensionRangeList()
        {
            return $this->getExtensionRange();
        }

        /**
         * Set "extension_range" value
         *
         * @param google\protobuf\DescriptorProto\ExtensionRange[] $value
         */
        public function setExtensionRange($value)
        {
            return $this->extension_range = $value;
        }

        /**
         * Add a new element to "extension_range"
         *
         * @param google\protobuf\DescriptorProto\ExtensionRange $value
         */
        public function addExtensionRange($value)
        {
            $this->extension_range[] = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\MessageOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\MessageOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }
    }
}


namespace google\protobuf\DescriptorProto {

         
    class ExtensionRange extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.DescriptorProto.ExtensionRange');

             
            // optional int32 start = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "start";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional int32 end = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "end";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "start" has a value
         *
         * @return boolean
         */
        public function hasStart()
        {
            return isset($this->start);
        }

        /**
         * Clear "start" value
         */
        public function clearStart()
        {
            unset($this->start);
        }

        
        /**
         * Get "start" value
         *
         * @return int 
         */
        public function getStart()
        {
            return $this->start;
        }

        /**
         * Set "start" value
         *
         * @param int $value
         */
        public function setStart($value)
        {
            return $this->start = $value;
        }

        
                
        /**
         * Check if "end" has a value
         *
         * @return boolean
         */
        public function hasEnd()
        {
            return isset($this->end);
        }

        /**
         * Clear "end" value
         */
        public function clearEnd()
        {
            unset($this->end);
        }

        
        /**
         * Get "end" value
         *
         * @return int 
         */
        public function getEnd()
        {
            return $this->end;
        }

        /**
         * Set "end" value
         *
         * @param int $value
         */
        public function setEnd($value)
        {
            return $this->end = $value;
        }
    }
}


namespace google\protobuf {

         
    class FieldDescriptorProto extends \DrSlump\Protobuf\Message {
                                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FieldDescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional int32 number = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "number";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional enum label = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "label";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\google\protobuf\FieldDescriptorProto\Label';

            $descriptor->addField($f);
             
            // optional enum type = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\google\protobuf\FieldDescriptorProto\Type';

            $descriptor->addField($f);
             
            // optional string type_name = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "type_name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string extendee = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "extendee";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string default_value = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "default_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional message options = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\FieldOptions';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "number" has a value
         *
         * @return boolean
         */
        public function hasNumber()
        {
            return isset($this->number);
        }

        /**
         * Clear "number" value
         */
        public function clearNumber()
        {
            unset($this->number);
        }

        
        /**
         * Get "number" value
         *
         * @return int 
         */
        public function getNumber()
        {
            return $this->number;
        }

        /**
         * Set "number" value
         *
         * @param int $value
         */
        public function setNumber($value)
        {
            return $this->number = $value;
        }

        
                
        /**
         * Check if "label" has a value
         *
         * @return boolean
         */
        public function hasLabel()
        {
            return isset($this->label);
        }

        /**
         * Clear "label" value
         */
        public function clearLabel()
        {
            unset($this->label);
        }

        
        /**
         * Get "label" value
         *
         * @return int - google\protobuf\FieldDescriptorProto\Label 
         */
        public function getLabel()
        {
            return $this->label;
        }

        /**
         * Set "label" value
         *
         * @param int - google\protobuf\FieldDescriptorProto\Label $value
         */
        public function setLabel($value)
        {
            return $this->label = $value;
        }

        
                
        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        
        /**
         * Get "type" value
         *
         * @return int - google\protobuf\FieldDescriptorProto\Type 
         */
        public function getType()
        {
            return $this->type;
        }

        /**
         * Set "type" value
         *
         * @param int - google\protobuf\FieldDescriptorProto\Type $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        
                
        /**
         * Check if "type_name" has a value
         *
         * @return boolean
         */
        public function hasTypeName()
        {
            return isset($this->type_name);
        }

        /**
         * Clear "type_name" value
         */
        public function clearTypeName()
        {
            unset($this->type_name);
        }

        
        /**
         * Get "type_name" value
         *
         * @return string 
         */
        public function getTypeName()
        {
            return $this->type_name;
        }

        /**
         * Set "type_name" value
         *
         * @param string $value
         */
        public function setTypeName($value)
        {
            return $this->type_name = $value;
        }

        
                
        /**
         * Check if "extendee" has a value
         *
         * @return boolean
         */
        public function hasExtendee()
        {
            return isset($this->extendee);
        }

        /**
         * Clear "extendee" value
         */
        public function clearExtendee()
        {
            unset($this->extendee);
        }

        
        /**
         * Get "extendee" value
         *
         * @return string 
         */
        public function getExtendee()
        {
            return $this->extendee;
        }

        /**
         * Set "extendee" value
         *
         * @param string $value
         */
        public function setExtendee($value)
        {
            return $this->extendee = $value;
        }

        
                
        /**
         * Check if "default_value" has a value
         *
         * @return boolean
         */
        public function hasDefaultValue()
        {
            return isset($this->default_value);
        }

        /**
         * Clear "default_value" value
         */
        public function clearDefaultValue()
        {
            unset($this->default_value);
        }

        
        /**
         * Get "default_value" value
         *
         * @return string 
         */
        public function getDefaultValue()
        {
            return $this->default_value;
        }

        /**
         * Set "default_value" value
         *
         * @param string $value
         */
        public function setDefaultValue($value)
        {
            return $this->default_value = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\FieldOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\FieldOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }
    }
}


namespace google\protobuf\FieldDescriptorProto {

            class Type extends \DrSlump\Protobuf\Enum
    {
                const TYPE_DOUBLE = 1;
                const TYPE_FLOAT = 2;
                const TYPE_INT64 = 3;
                const TYPE_UINT64 = 4;
                const TYPE_INT32 = 5;
                const TYPE_FIXED64 = 6;
                const TYPE_FIXED32 = 7;
                const TYPE_BOOL = 8;
                const TYPE_STRING = 9;
                const TYPE_GROUP = 10;
                const TYPE_MESSAGE = 11;
                const TYPE_BYTES = 12;
                const TYPE_UINT32 = 13;
                const TYPE_ENUM = 14;
                const TYPE_SFIXED32 = 15;
                const TYPE_SFIXED64 = 16;
                const TYPE_SINT32 = 17;
                const TYPE_SINT64 = 18;
    }
}
 

namespace google\protobuf\FieldDescriptorProto {

            class Label extends \DrSlump\Protobuf\Enum
    {
                const LABEL_OPTIONAL = 1;
                const LABEL_REQUIRED = 2;
                const LABEL_REPEATED = 3;
    }
}
 

namespace google\protobuf {

         
    class EnumDescriptorProto extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumDescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message value = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\EnumValueDescriptorProto';

            $descriptor->addField($f);
             
            // optional message options = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\EnumOptions';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
         *
         * @return google\protobuf\EnumValueDescriptorProto[]
         */
        public function getValue($idx = null)
        {
            if (NULL !== $idx) {
                return $this->value[$idx];
            }

            return $this->value;
        }

        /**
         * Get "value" list of values
         *
         * @return google\protobuf\EnumValueDescriptorProto[]
         */
        public function getValueList()
        {
            return $this->getValue();
        }

        /**
         * Set "value" value
         *
         * @param google\protobuf\EnumValueDescriptorProto[] $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }

        /**
         * Add a new element to "value"
         *
         * @param google\protobuf\EnumValueDescriptorProto $value
         */
        public function addValue($value)
        {
            $this->value[] = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\EnumOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\EnumOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }
    }
}


namespace google\protobuf {

         
    class EnumValueDescriptorProto extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumValueDescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional int32 number = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "number";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional message options = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\EnumValueOptions';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "number" has a value
         *
         * @return boolean
         */
        public function hasNumber()
        {
            return isset($this->number);
        }

        /**
         * Clear "number" value
         */
        public function clearNumber()
        {
            unset($this->number);
        }

        
        /**
         * Get "number" value
         *
         * @return int 
         */
        public function getNumber()
        {
            return $this->number;
        }

        /**
         * Set "number" value
         *
         * @param int $value
         */
        public function setNumber($value)
        {
            return $this->number = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\EnumValueOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\EnumValueOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }
    }
}


namespace google\protobuf {

         
    class ServiceDescriptorProto extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.ServiceDescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message method = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "method";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\MethodDescriptorProto';

            $descriptor->addField($f);
             
            // optional message options = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\ServiceOptions';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "method" has a value
         *
         * @return boolean
         */
        public function hasMethod()
        {
            return isset($this->method);
        }

        /**
         * Clear "method" value
         */
        public function clearMethod()
        {
            unset($this->method);
        }

        
        /**
         * Get "method" value
         *
         * @return google\protobuf\MethodDescriptorProto[]
         */
        public function getMethod($idx = null)
        {
            if (NULL !== $idx) {
                return $this->method[$idx];
            }

            return $this->method;
        }

        /**
         * Get "method" list of values
         *
         * @return google\protobuf\MethodDescriptorProto[]
         */
        public function getMethodList()
        {
            return $this->getMethod();
        }

        /**
         * Set "method" value
         *
         * @param google\protobuf\MethodDescriptorProto[] $value
         */
        public function setMethod($value)
        {
            return $this->method = $value;
        }

        /**
         * Add a new element to "method"
         *
         * @param google\protobuf\MethodDescriptorProto $value
         */
        public function addMethod($value)
        {
            $this->method[] = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\ServiceOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\ServiceOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }
    }
}


namespace google\protobuf {

         
    class MethodDescriptorProto extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.MethodDescriptorProto');

             
            // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string input_type = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "input_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string output_type = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "output_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional message options = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "options";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\MethodOptions';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "input_type" has a value
         *
         * @return boolean
         */
        public function hasInputType()
        {
            return isset($this->input_type);
        }

        /**
         * Clear "input_type" value
         */
        public function clearInputType()
        {
            unset($this->input_type);
        }

        
        /**
         * Get "input_type" value
         *
         * @return string 
         */
        public function getInputType()
        {
            return $this->input_type;
        }

        /**
         * Set "input_type" value
         *
         * @param string $value
         */
        public function setInputType($value)
        {
            return $this->input_type = $value;
        }

        
                
        /**
         * Check if "output_type" has a value
         *
         * @return boolean
         */
        public function hasOutputType()
        {
            return isset($this->output_type);
        }

        /**
         * Clear "output_type" value
         */
        public function clearOutputType()
        {
            unset($this->output_type);
        }

        
        /**
         * Get "output_type" value
         *
         * @return string 
         */
        public function getOutputType()
        {
            return $this->output_type;
        }

        /**
         * Set "output_type" value
         *
         * @param string $value
         */
        public function setOutputType($value)
        {
            return $this->output_type = $value;
        }

        
                
        /**
         * Check if "options" has a value
         *
         * @return boolean
         */
        public function hasOptions()
        {
            return isset($this->options);
        }

        /**
         * Clear "options" value
         */
        public function clearOptions()
        {
            unset($this->options);
        }

        
        /**
         * Get "options" value
         *
         * @return google\protobuf\MethodOptions 
         */
        public function getOptions()
        {
            return $this->options;
        }

        /**
         * Set "options" value
         *
         * @param google\protobuf\MethodOptions $value
         */
        public function setOptions($value)
        {
            return $this->options = $value;
        }
    }
}


namespace google\protobuf {

         
    class FileOptions extends \DrSlump\Protobuf\Message {
                                                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FileOptions');

             
            // optional string java_package = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "java_package";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional string java_outer_classname = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "java_outer_classname";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional bool java_multiple_files = 10 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "java_multiple_files";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional bool java_generate_equals_and_hash = 20 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 20;
            $f->name   = "java_generate_equals_and_hash";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional enum optimize_for = 9 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "optimize_for";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\google\protobuf\FileOptions\OptimizeMode';
            
             
            $f->default = \google\protobuf\FileOptions\OptimizeMode::SPEED;

            $descriptor->addField($f);
             
            // optional bool cc_generic_services = 16 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 16;
            $f->name   = "cc_generic_services";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional bool java_generic_services = 17 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 17;
            $f->name   = "java_generic_services";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional bool py_generic_services = 18 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 18;
            $f->name   = "py_generic_services";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "java_package" has a value
         *
         * @return boolean
         */
        public function hasJavaPackage()
        {
            return isset($this->java_package);
        }

        /**
         * Clear "java_package" value
         */
        public function clearJavaPackage()
        {
            unset($this->java_package);
        }

        
        /**
         * Get "java_package" value
         *
         * @return string 
         */
        public function getJavaPackage()
        {
            return $this->java_package;
        }

        /**
         * Set "java_package" value
         *
         * @param string $value
         */
        public function setJavaPackage($value)
        {
            return $this->java_package = $value;
        }

        
                
        /**
         * Check if "java_outer_classname" has a value
         *
         * @return boolean
         */
        public function hasJavaOuterClassname()
        {
            return isset($this->java_outer_classname);
        }

        /**
         * Clear "java_outer_classname" value
         */
        public function clearJavaOuterClassname()
        {
            unset($this->java_outer_classname);
        }

        
        /**
         * Get "java_outer_classname" value
         *
         * @return string 
         */
        public function getJavaOuterClassname()
        {
            return $this->java_outer_classname;
        }

        /**
         * Set "java_outer_classname" value
         *
         * @param string $value
         */
        public function setJavaOuterClassname($value)
        {
            return $this->java_outer_classname = $value;
        }

        
                
        /**
         * Check if "java_multiple_files" has a value
         *
         * @return boolean
         */
        public function hasJavaMultipleFiles()
        {
            return isset($this->java_multiple_files);
        }

        /**
         * Clear "java_multiple_files" value
         */
        public function clearJavaMultipleFiles()
        {
            unset($this->java_multiple_files);
        }

        
        /**
         * Get "java_multiple_files" value
         *
         * @return boolean 
         */
        public function getJavaMultipleFiles()
        {
            return $this->java_multiple_files;
        }

        /**
         * Set "java_multiple_files" value
         *
         * @param boolean $value
         */
        public function setJavaMultipleFiles($value)
        {
            return $this->java_multiple_files = $value;
        }

        
                
        /**
         * Check if "java_generate_equals_and_hash" has a value
         *
         * @return boolean
         */
        public function hasJavaGenerateEqualsAndHash()
        {
            return isset($this->java_generate_equals_and_hash);
        }

        /**
         * Clear "java_generate_equals_and_hash" value
         */
        public function clearJavaGenerateEqualsAndHash()
        {
            unset($this->java_generate_equals_and_hash);
        }

        
        /**
         * Get "java_generate_equals_and_hash" value
         *
         * @return boolean 
         */
        public function getJavaGenerateEqualsAndHash()
        {
            return $this->java_generate_equals_and_hash;
        }

        /**
         * Set "java_generate_equals_and_hash" value
         *
         * @param boolean $value
         */
        public function setJavaGenerateEqualsAndHash($value)
        {
            return $this->java_generate_equals_and_hash = $value;
        }

        
                
        /**
         * Check if "optimize_for" has a value
         *
         * @return boolean
         */
        public function hasOptimizeFor()
        {
            return isset($this->optimize_for);
        }

        /**
         * Clear "optimize_for" value
         */
        public function clearOptimizeFor()
        {
            unset($this->optimize_for);
        }

        
        /**
         * Get "optimize_for" value
         *
         * @return int - google\protobuf\FileOptions\OptimizeMode 
         */
        public function getOptimizeFor()
        {
            return $this->optimize_for;
        }

        /**
         * Set "optimize_for" value
         *
         * @param int - google\protobuf\FileOptions\OptimizeMode $value
         */
        public function setOptimizeFor($value)
        {
            return $this->optimize_for = $value;
        }

        
                
        /**
         * Check if "cc_generic_services" has a value
         *
         * @return boolean
         */
        public function hasCcGenericServices()
        {
            return isset($this->cc_generic_services);
        }

        /**
         * Clear "cc_generic_services" value
         */
        public function clearCcGenericServices()
        {
            unset($this->cc_generic_services);
        }

        
        /**
         * Get "cc_generic_services" value
         *
         * @return boolean 
         */
        public function getCcGenericServices()
        {
            return $this->cc_generic_services;
        }

        /**
         * Set "cc_generic_services" value
         *
         * @param boolean $value
         */
        public function setCcGenericServices($value)
        {
            return $this->cc_generic_services = $value;
        }

        
                
        /**
         * Check if "java_generic_services" has a value
         *
         * @return boolean
         */
        public function hasJavaGenericServices()
        {
            return isset($this->java_generic_services);
        }

        /**
         * Clear "java_generic_services" value
         */
        public function clearJavaGenericServices()
        {
            unset($this->java_generic_services);
        }

        
        /**
         * Get "java_generic_services" value
         *
         * @return boolean 
         */
        public function getJavaGenericServices()
        {
            return $this->java_generic_services;
        }

        /**
         * Set "java_generic_services" value
         *
         * @param boolean $value
         */
        public function setJavaGenericServices($value)
        {
            return $this->java_generic_services = $value;
        }

        
                
        /**
         * Check if "py_generic_services" has a value
         *
         * @return boolean
         */
        public function hasPyGenericServices()
        {
            return isset($this->py_generic_services);
        }

        /**
         * Clear "py_generic_services" value
         */
        public function clearPyGenericServices()
        {
            unset($this->py_generic_services);
        }

        
        /**
         * Get "py_generic_services" value
         *
         * @return boolean 
         */
        public function getPyGenericServices()
        {
            return $this->py_generic_services;
        }

        /**
         * Set "py_generic_services" value
         *
         * @param boolean $value
         */
        public function setPyGenericServices($value)
        {
            return $this->py_generic_services = $value;
        }

        
                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf\FileOptions {

            class OptimizeMode extends \DrSlump\Protobuf\Enum
    {
                const SPEED = 1;
                const CODE_SIZE = 2;
                const LITE_RUNTIME = 3;
    }
}
 

namespace google\protobuf {

         
    class MessageOptions extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.MessageOptions');

             
            // optional bool message_set_wire_format = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "message_set_wire_format";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional bool no_standard_descriptor_accessor = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "no_standard_descriptor_accessor";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "message_set_wire_format" has a value
         *
         * @return boolean
         */
        public function hasMessageSetWireFormat()
        {
            return isset($this->message_set_wire_format);
        }

        /**
         * Clear "message_set_wire_format" value
         */
        public function clearMessageSetWireFormat()
        {
            unset($this->message_set_wire_format);
        }

        
        /**
         * Get "message_set_wire_format" value
         *
         * @return boolean 
         */
        public function getMessageSetWireFormat()
        {
            return $this->message_set_wire_format;
        }

        /**
         * Set "message_set_wire_format" value
         *
         * @param boolean $value
         */
        public function setMessageSetWireFormat($value)
        {
            return $this->message_set_wire_format = $value;
        }

        
                
        /**
         * Check if "no_standard_descriptor_accessor" has a value
         *
         * @return boolean
         */
        public function hasNoStandardDescriptorAccessor()
        {
            return isset($this->no_standard_descriptor_accessor);
        }

        /**
         * Clear "no_standard_descriptor_accessor" value
         */
        public function clearNoStandardDescriptorAccessor()
        {
            unset($this->no_standard_descriptor_accessor);
        }

        
        /**
         * Get "no_standard_descriptor_accessor" value
         *
         * @return boolean 
         */
        public function getNoStandardDescriptorAccessor()
        {
            return $this->no_standard_descriptor_accessor;
        }

        /**
         * Set "no_standard_descriptor_accessor" value
         *
         * @param boolean $value
         */
        public function setNoStandardDescriptorAccessor($value)
        {
            return $this->no_standard_descriptor_accessor = $value;
        }

        
                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf {

         
    class FieldOptions extends \DrSlump\Protobuf\Message {
                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.FieldOptions');

             
            // optional enum ctype = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "ctype";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\google\protobuf\FieldOptions\CType';
            
             
            $f->default = \google\protobuf\FieldOptions\CType::STRING;

            $descriptor->addField($f);
             
            // optional bool packed = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "packed";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);
             
            // optional bool deprecated = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "deprecated";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;
            
             
            $f->default = false;

            $descriptor->addField($f);
             
            // optional string experimental_map_key = 9 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "experimental_map_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "ctype" has a value
         *
         * @return boolean
         */
        public function hasCtype()
        {
            return isset($this->ctype);
        }

        /**
         * Clear "ctype" value
         */
        public function clearCtype()
        {
            unset($this->ctype);
        }

        
        /**
         * Get "ctype" value
         *
         * @return int - google\protobuf\FieldOptions\CType 
         */
        public function getCtype()
        {
            return $this->ctype;
        }

        /**
         * Set "ctype" value
         *
         * @param int - google\protobuf\FieldOptions\CType $value
         */
        public function setCtype($value)
        {
            return $this->ctype = $value;
        }

        
                
        /**
         * Check if "packed" has a value
         *
         * @return boolean
         */
        public function hasPacked()
        {
            return isset($this->packed);
        }

        /**
         * Clear "packed" value
         */
        public function clearPacked()
        {
            unset($this->packed);
        }

        
        /**
         * Get "packed" value
         *
         * @return boolean 
         */
        public function getPacked()
        {
            return $this->packed;
        }

        /**
         * Set "packed" value
         *
         * @param boolean $value
         */
        public function setPacked($value)
        {
            return $this->packed = $value;
        }

        
                
        /**
         * Check if "deprecated" has a value
         *
         * @return boolean
         */
        public function hasDeprecated()
        {
            return isset($this->deprecated);
        }

        /**
         * Clear "deprecated" value
         */
        public function clearDeprecated()
        {
            unset($this->deprecated);
        }

        
        /**
         * Get "deprecated" value
         *
         * @return boolean 
         */
        public function getDeprecated()
        {
            return $this->deprecated;
        }

        /**
         * Set "deprecated" value
         *
         * @param boolean $value
         */
        public function setDeprecated($value)
        {
            return $this->deprecated = $value;
        }

        
                
        /**
         * Check if "experimental_map_key" has a value
         *
         * @return boolean
         */
        public function hasExperimentalMapKey()
        {
            return isset($this->experimental_map_key);
        }

        /**
         * Clear "experimental_map_key" value
         */
        public function clearExperimentalMapKey()
        {
            unset($this->experimental_map_key);
        }

        
        /**
         * Get "experimental_map_key" value
         *
         * @return string 
         */
        public function getExperimentalMapKey()
        {
            return $this->experimental_map_key;
        }

        /**
         * Set "experimental_map_key" value
         *
         * @param string $value
         */
        public function setExperimentalMapKey($value)
        {
            return $this->experimental_map_key = $value;
        }

        
                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf\FieldOptions {

            class CType extends \DrSlump\Protobuf\Enum
    {
                const STRING = 0;
                const CORD = 1;
                const STRING_PIECE = 2;
    }
}
 

namespace google\protobuf {

         
    class EnumOptions extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumOptions');

             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf {

         
    class EnumValueOptions extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumValueOptions');

             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf {

         
    class ServiceOptions extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.ServiceOptions');

             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf {

         
    class MethodOptions extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.MethodOptions');

             
            // repeated message uninterpreted_option = 999 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 999;
            $f->name   = "uninterpreted_option";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "uninterpreted_option" has a value
         *
         * @return boolean
         */
        public function hasUninterpretedOption()
        {
            return isset($this->uninterpreted_option);
        }

        /**
         * Clear "uninterpreted_option" value
         */
        public function clearUninterpretedOption()
        {
            unset($this->uninterpreted_option);
        }

        
        /**
         * Get "uninterpreted_option" value
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOption($idx = null)
        {
            if (NULL !== $idx) {
                return $this->uninterpreted_option[$idx];
            }

            return $this->uninterpreted_option;
        }

        /**
         * Get "uninterpreted_option" list of values
         *
         * @return google\protobuf\UninterpretedOption[]
         */
        public function getUninterpretedOptionList()
        {
            return $this->getUninterpretedOption();
        }

        /**
         * Set "uninterpreted_option" value
         *
         * @param google\protobuf\UninterpretedOption[] $value
         */
        public function setUninterpretedOption($value)
        {
            return $this->uninterpreted_option = $value;
        }

        /**
         * Add a new element to "uninterpreted_option"
         *
         * @param google\protobuf\UninterpretedOption $value
         */
        public function addUninterpretedOption($value)
        {
            $this->uninterpreted_option[] = $value;
        }
    }
}


namespace google\protobuf {

         
    class UninterpretedOption extends \DrSlump\Protobuf\Message {
                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.UninterpretedOption');

             
            // repeated message name = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\UninterpretedOption\NamePart';

            $descriptor->addField($f);
             
            // optional string identifier_value = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "identifier_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional uint64 positive_int_value = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "positive_int_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
             
            // optional int64 negative_int_value = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "negative_int_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
             
            // optional double double_value = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "double_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
             
            // optional bytes string_value = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "string_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);
             
            // optional string aggregate_value = 8 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "aggregate_value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return google\protobuf\UninterpretedOption\NamePart[]
         */
        public function getName($idx = null)
        {
            if (NULL !== $idx) {
                return $this->name[$idx];
            }

            return $this->name;
        }

        /**
         * Get "name" list of values
         *
         * @return google\protobuf\UninterpretedOption\NamePart[]
         */
        public function getNameList()
        {
            return $this->getName();
        }

        /**
         * Set "name" value
         *
         * @param google\protobuf\UninterpretedOption\NamePart[] $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        /**
         * Add a new element to "name"
         *
         * @param google\protobuf\UninterpretedOption\NamePart $value
         */
        public function addName($value)
        {
            $this->name[] = $value;
        }

        
                
        /**
         * Check if "identifier_value" has a value
         *
         * @return boolean
         */
        public function hasIdentifierValue()
        {
            return isset($this->identifier_value);
        }

        /**
         * Clear "identifier_value" value
         */
        public function clearIdentifierValue()
        {
            unset($this->identifier_value);
        }

        
        /**
         * Get "identifier_value" value
         *
         * @return string 
         */
        public function getIdentifierValue()
        {
            return $this->identifier_value;
        }

        /**
         * Set "identifier_value" value
         *
         * @param string $value
         */
        public function setIdentifierValue($value)
        {
            return $this->identifier_value = $value;
        }

        
                
        /**
         * Check if "positive_int_value" has a value
         *
         * @return boolean
         */
        public function hasPositiveIntValue()
        {
            return isset($this->positive_int_value);
        }

        /**
         * Clear "positive_int_value" value
         */
        public function clearPositiveIntValue()
        {
            unset($this->positive_int_value);
        }

        
        /**
         * Get "positive_int_value" value
         *
         * @return int 
         */
        public function getPositiveIntValue()
        {
            return $this->positive_int_value;
        }

        /**
         * Set "positive_int_value" value
         *
         * @param int $value
         */
        public function setPositiveIntValue($value)
        {
            return $this->positive_int_value = $value;
        }

        
                
        /**
         * Check if "negative_int_value" has a value
         *
         * @return boolean
         */
        public function hasNegativeIntValue()
        {
            return isset($this->negative_int_value);
        }

        /**
         * Clear "negative_int_value" value
         */
        public function clearNegativeIntValue()
        {
            unset($this->negative_int_value);
        }

        
        /**
         * Get "negative_int_value" value
         *
         * @return int 
         */
        public function getNegativeIntValue()
        {
            return $this->negative_int_value;
        }

        /**
         * Set "negative_int_value" value
         *
         * @param int $value
         */
        public function setNegativeIntValue($value)
        {
            return $this->negative_int_value = $value;
        }

        
                
        /**
         * Check if "double_value" has a value
         *
         * @return boolean
         */
        public function hasDoubleValue()
        {
            return isset($this->double_value);
        }

        /**
         * Clear "double_value" value
         */
        public function clearDoubleValue()
        {
            unset($this->double_value);
        }

        
        /**
         * Get "double_value" value
         *
         * @return float 
         */
        public function getDoubleValue()
        {
            return $this->double_value;
        }

        /**
         * Set "double_value" value
         *
         * @param float $value
         */
        public function setDoubleValue($value)
        {
            return $this->double_value = $value;
        }

        
                
        /**
         * Check if "string_value" has a value
         *
         * @return boolean
         */
        public function hasStringValue()
        {
            return isset($this->string_value);
        }

        /**
         * Clear "string_value" value
         */
        public function clearStringValue()
        {
            unset($this->string_value);
        }

        
        /**
         * Get "string_value" value
         *
         * @return string 
         */
        public function getStringValue()
        {
            return $this->string_value;
        }

        /**
         * Set "string_value" value
         *
         * @param string $value
         */
        public function setStringValue($value)
        {
            return $this->string_value = $value;
        }

        
                
        /**
         * Check if "aggregate_value" has a value
         *
         * @return boolean
         */
        public function hasAggregateValue()
        {
            return isset($this->aggregate_value);
        }

        /**
         * Clear "aggregate_value" value
         */
        public function clearAggregateValue()
        {
            unset($this->aggregate_value);
        }

        
        /**
         * Get "aggregate_value" value
         *
         * @return string 
         */
        public function getAggregateValue()
        {
            return $this->aggregate_value;
        }

        /**
         * Set "aggregate_value" value
         *
         * @param string $value
         */
        public function setAggregateValue($value)
        {
            return $this->aggregate_value = $value;
        }
    }
}


namespace google\protobuf\UninterpretedOption {

         
    class NamePart extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.UninterpretedOption.NamePart');

             
            // required string name_part = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name_part";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // required bool is_extension = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "is_extension";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name_part" has a value
         *
         * @return boolean
         */
        public function hasNamePart()
        {
            return isset($this->name_part);
        }

        /**
         * Clear "name_part" value
         */
        public function clearNamePart()
        {
            unset($this->name_part);
        }

        
        /**
         * Get "name_part" value
         *
         * @return string 
         */
        public function getNamePart()
        {
            return $this->name_part;
        }

        /**
         * Set "name_part" value
         *
         * @param string $value
         */
        public function setNamePart($value)
        {
            return $this->name_part = $value;
        }

        
                
        /**
         * Check if "is_extension" has a value
         *
         * @return boolean
         */
        public function hasIsExtension()
        {
            return isset($this->is_extension);
        }

        /**
         * Clear "is_extension" value
         */
        public function clearIsExtension()
        {
            unset($this->is_extension);
        }

        
        /**
         * Get "is_extension" value
         *
         * @return boolean 
         */
        public function getIsExtension()
        {
            return $this->is_extension;
        }

        /**
         * Set "is_extension" value
         *
         * @param boolean $value
         */
        public function setIsExtension($value)
        {
            return $this->is_extension = $value;
        }
    }
}


namespace google\protobuf {

         
    class SourceCodeInfo extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.SourceCodeInfo');

             
            // repeated message location = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "location";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\google\protobuf\SourceCodeInfo\Location';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "location" has a value
         *
         * @return boolean
         */
        public function hasLocation()
        {
            return isset($this->location);
        }

        /**
         * Clear "location" value
         */
        public function clearLocation()
        {
            unset($this->location);
        }

        
        /**
         * Get "location" value
         *
         * @return google\protobuf\SourceCodeInfo\Location[]
         */
        public function getLocation($idx = null)
        {
            if (NULL !== $idx) {
                return $this->location[$idx];
            }

            return $this->location;
        }

        /**
         * Get "location" list of values
         *
         * @return google\protobuf\SourceCodeInfo\Location[]
         */
        public function getLocationList()
        {
            return $this->getLocation();
        }

        /**
         * Set "location" value
         *
         * @param google\protobuf\SourceCodeInfo\Location[] $value
         */
        public function setLocation($value)
        {
            return $this->location = $value;
        }

        /**
         * Add a new element to "location"
         *
         * @param google\protobuf\SourceCodeInfo\Location $value
         */
        public function addLocation($value)
        {
            $this->location[] = $value;
        }
    }
}


namespace google\protobuf\SourceCodeInfo {

         
    class Location extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.SourceCodeInfo.Location');

             
            // repeated int32 path = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "path";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // repeated int32 span = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "span";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "path" has a value
         *
         * @return boolean
         */
        public function hasPath()
        {
            return isset($this->path);
        }

        /**
         * Clear "path" value
         */
        public function clearPath()
        {
            unset($this->path);
        }

        
        /**
         * Get "path" value
         *
         * @return int[]
         */
        public function getPath($idx = null)
        {
            if (NULL !== $idx) {
                return $this->path[$idx];
            }

            return $this->path;
        }

        /**
         * Get "path" list of values
         *
         * @return int[]
         */
        public function getPathList()
        {
            return $this->getPath();
        }

        /**
         * Set "path" value
         *
         * @param int[] $value
         */
        public function setPath($value)
        {
            return $this->path = $value;
        }

        /**
         * Add a new element to "path"
         *
         * @param int $value
         */
        public function addPath($value)
        {
            $this->path[] = $value;
        }

        
                
        /**
         * Check if "span" has a value
         *
         * @return boolean
         */
        public function hasSpan()
        {
            return isset($this->span);
        }

        /**
         * Clear "span" value
         */
        public function clearSpan()
        {
            unset($this->span);
        }

        
        /**
         * Get "span" value
         *
         * @return int[]
         */
        public function getSpan($idx = null)
        {
            if (NULL !== $idx) {
                return $this->span[$idx];
            }

            return $this->span;
        }

        /**
         * Get "span" list of values
         *
         * @return int[]
         */
        public function getSpanList()
        {
            return $this->getSpan();
        }

        /**
         * Set "span" value
         *
         * @param int[] $value
         */
        public function setSpan($value)
        {
            return $this->span = $value;
        }

        /**
         * Add a new element to "span"
         *
         * @param int $value
         */
        public function addSpan($value)
        {
            $this->span[] = $value;
        }
    }
}


