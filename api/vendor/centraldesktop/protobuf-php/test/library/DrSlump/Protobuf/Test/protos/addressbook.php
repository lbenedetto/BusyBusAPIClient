<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@ 
// Source: addressbook.proto 
//   Date: 2012-03-19 10:12:31 


namespace test {

            /**
     * Defines a Person in the addressbook
 
     */
     
    class Person extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'test.Person');

             
            // required string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // required int32 id = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "id";
            $f->rule   = \DrSlump\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf::TYPE_INT32;

            $descriptor->addField($f);
             
            // optional string email = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "email";
            $f->rule   = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // repeated message phone = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "phone";
            $f->rule   = \DrSlump\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\test\Person\PhoneNumber';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
         *
         * @return string 
         */
        public function getName()
        {
            return $this->name;
        }

        /**
         * Set "name" value
         *
         * @param string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "id" has a value
         *
         * @return boolean
         */
        public function hasId()
        {
            return isset($this->id);
        }

        /**
         * Clear "id" value
         */
        public function clearId()
        {
            unset($this->id);
        }

        
        /**
         * Get "id" value
         *
         * @return int 
         */
        public function getId()
        {
            return $this->id;
        }

        /**
         * Set "id" value
         *
         * @param int $value
         */
        public function setId($value)
        {
            return $this->id = $value;
        }

        
                
        /**
         * Check if "email" has a value
         *
         * @return boolean
         */
        public function hasEmail()
        {
            return isset($this->email);
        }

        /**
         * Clear "email" value
         */
        public function clearEmail()
        {
            unset($this->email);
        }

        
        /**
         * Get "email" value
         *
         * @return string 
         */
        public function getEmail()
        {
            return $this->email;
        }

        /**
         * Set "email" value
         *
         * @param string $value
         */
        public function setEmail($value)
        {
            return $this->email = $value;
        }

        
                
        /**
         * Check if "phone" has a value
         *
         * @return boolean
         */
        public function hasPhone()
        {
            return isset($this->phone);
        }

        /**
         * Clear "phone" value
         */
        public function clearPhone()
        {
            unset($this->phone);
        }

        
        /**
         * Get "phone" value
         *
         * @return test\Person\PhoneNumber[]
         */
        public function getPhone($idx = null)
        {
            if (NULL !== $idx) {
                return $this->phone[$idx];
            }

            return $this->phone;
        }

        /**
         * Set "phone" value
         *
         * @param test\Person\PhoneNumber[] $value
         */
        public function setPhone($value)
        {
            return $this->phone = $value;
        }

        /**
         * Add a new element to "phone"
         *
         * @param test\Person\PhoneNumber $value
         */
        public function addPhone($value)
        {
            $this->phone[] = $value;
        }
    }
}


namespace test\Person {

            /**
     * Different types of phones
 
     */
        class PhoneType extends \DrSlump\Protobuf\Enum
    {
                const MOBILE = 0;
                const HOME = 1;
                const WORK = 2;
    }
}
 

namespace test\Person {

            /**
     * A phone number record
 
     */
     
    class PhoneNumber extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'test.Person.PhoneNumber');

             
            // required string number = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "number";
            $f->rule   = \DrSlump\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
             
            // optional enum type = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf::TYPE_ENUM;
             
            $f->reference = '\test\Person\PhoneType';
            
             
            $f->default = \test\Person\PhoneType::HOME;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "number" has a value
         *
         * @return boolean
         */
        public function hasNumber()
        {
            return isset($this->number);
        }

        /**
         * Clear "number" value
         */
        public function clearNumber()
        {
            unset($this->number);
        }

        
        /**
         * Get "number" value
         *
         * @return string 
         */
        public function getNumber()
        {
            return $this->number;
        }

        /**
         * Set "number" value
         *
         * @param string $value
         */
        public function setNumber($value)
        {
            return $this->number = $value;
        }

        
                
        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        
        /**
         * Get "type" value
         *
         * @return int - test\Person\PhoneType
         */
        public function getType()
        {
            return $this->type;
        }

        /**
         * Set "type" value
         *
         * @param int - test\Person\PhoneType $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }
    }
}


namespace test {

            /**
     * A collection of persons contact details
 
     */
     
    class AddressBook extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'test.AddressBook');

             
            // repeated message person = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "person";
            $f->rule   = \DrSlump\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\test\Person';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "person" has a value
         *
         * @return boolean
         */
        public function hasPerson()
        {
            return isset($this->person);
        }

        /**
         * Clear "person" value
         */
        public function clearPerson()
        {
            unset($this->person);
        }

        
        /**
         * Get "person" value
         *
         * @return test\Person[]
         */
        public function getPerson($idx = null)
        {
            if (NULL !== $idx) {
                return $this->person[$idx];
            }

            return $this->person;
        }

        /**
         * Set "person" value
         *
         * @param test\Person[] $value
         */
        public function setPerson($value)
        {
            return $this->person = $value;
        }

        /**
         * Add a new element to "person"
         *
         * @param test\Person $value
         */
        public function addPerson($value)
        {
            $this->person[] = $value;
        }
    }
}


